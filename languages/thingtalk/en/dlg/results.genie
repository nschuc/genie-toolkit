// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

// Templates that describe results from a query

import assert from 'assert';
import { Ast, } from 'thingtalk';

import * as C from '../../ast_manip';
import * as D from '../../dialogue_acts';
import * as S from '../../state_manip';
import { SlotBag, checkAndAddSlot } from '../../slot_bag';

// import thingpedia info
import _tpLoader from '../../load-thingpedia';

// names of objects in the result

result_name_pair : D.NameList = {
    ctx:ctx_with_result n1:constant_name ',' n2:constant_name => {
        const results = ctx.results;
        assert(results && results.length > 0);
        if (results.length < 2)
            return null;
        if (!ctx.resultInfo!.hasID)
            return null;

        const r1 = results[0];
        const r2 = results[1];
        if (!r1.value.id.equals(n1) || !r2.value.id.equals(n2))
            return null;
        return { ctx, results: results.slice(0, 2) };
    };
}

result_name_list : D.NameList = {
    ctx:ctx_with_result n1:constant_name ('and' | 'or') n2:constant_name [priority=2] => {
        const results = ctx.results;
        assert(results && results.length > 0);
        if (results.length < 2)
            return null;
        if (!ctx.resultInfo!.hasID)
            return null;

        const r1 = results[0];
        const r2 = results[1];
        if (!r1.value.id.equals(n1) || !r2.value.id.equals(n2))
            return null;
        return { ctx, results: results.slice(0, 2) };
    };

    pair:result_name_pair ('and' | 'or') n3:constant_name [priority=3] => {
        const ctx = pair.ctx;
        const results = ctx.results;
        assert(results && results.length > 0);
        if (results.length < 3)
            return null;
        if (!ctx.resultInfo!.hasID)
            return null;
        const r3 = results[2];
        if (!r3.value.id.equals(n3))
            return null;
        return { ctx, results: results.slice(0, 3) };
    };
}

// a noun phrase of the form "the X is ... and the Y is ..."
// used to answer questions, and to add extra information after recommendations & action results
direct_result_info_phrase : SlotBag = {
    ( ctx:ctx_with_result phrase:one_param_direct_result_info_phrase
    | ctx:ctx_with_result phrase:two_param_direct_result_info_phrase
    | ctx:ctx_with_result phrase:three_param_direct_result_info_phrase
    ) => D.checkInfoPhrase(ctx, phrase);
}

one_param_direct_result_info_phrase : SlotBag = {
    'the' param:out_param_Any 'is' v:constant_Any => {
        if (!param.type.equals(v.getType()))
            return null;
        const bag = new SlotBag(param.schema);
        bag.set(param.name, v);
        return bag;
    };

    'the distance is' v:constant_Measure_m => {
        const bag = new SlotBag(null);
        bag.set('distance', v);
        return bag;
    };
}

two_param_direct_result_info_phrase : SlotBag = {
    b1:one_param_direct_result_info_phrase 'and' b2:one_param_direct_result_info_phrase => SlotBag.merge(b1, b2);
}

three_param_direct_result_info_phrase : SlotBag = {
    b1:one_param_direct_result_info_phrase ',' b2:two_param_direct_result_info_phrase => SlotBag.merge(b1, b2);
}

// a noun phrase of the form "a restaurant in Cambridge that serves X"
// structurally similar to a with_filter_table, but used to describe a result
// so either filters & comparisons are not allowed, and the AST is different (it's a SlotBag)
result_info_phrase : SlotBag = {
    // one, two or three slots, without any "or", "not" or "comparison" filters
    // only "and" and "contains"
    // and furthermore, if the context is a projection, all projected fields must
    // appear as filters
    ctx:ctx_with_result table:one_with_info_phrase [weight=0.33*2, priority=1] => D.checkInfoPhrase(ctx, table);
    ctx:ctx_with_result table:one_which_info_phrase [weight=0.33*2, priority=1] => D.checkInfoPhrase(ctx, table);
    ctx:ctx_with_result table:one_clean_info_phrase [weight=0.33*2, priority=1] => D.checkInfoPhrase(ctx, table);

    ctx:ctx_with_result table:two_with_info_phrase [weight=0.33, priority=2] => D.checkInfoPhrase(ctx, table);
    ctx:ctx_with_result table:two_which_info_phrase [weight=0.33, priority=2] => D.checkInfoPhrase(ctx, table);
    ctx:ctx_with_result table:two_clean_info_phrase [weight=0.33, priority=2] => D.checkInfoPhrase(ctx, table);

    ctx:ctx_with_result table:three_with_info_phrase [weight=0.33*0.5, priority=-1] => D.checkInfoPhrase(ctx, table);
    ctx:ctx_with_result table:three_which_info_phrase [weight=0.33*0.5, priority=-1] => D.checkInfoPhrase(ctx, table);
    ctx:ctx_with_result table:three_clean_info_phrase [weight=0.33*0.5, priority=-1] => D.checkInfoPhrase(ctx, table);
}

base_slot_bag : SlotBag = {
    table:base_table => {
        assert(table.schema instanceof Ast.FunctionDef);
        return new SlotBag(table.schema);
    };
}

one_with_info_phrase : SlotBag = {
    table:base_slot_bag ('with' | 'having') filter:npp_filter => checkAndAddSlot(table, filter);
}

one_which_info_phrase : SlotBag = {
    table:base_slot_bag ('which' | 'that') ('is' | 'are') filter:npi_filter => checkAndAddSlot(table, filter);
    table:base_slot_bag ('which' | 'that') filter:avp_filter => checkAndAddSlot(table, filter);
    table:base_slot_bag ('which' | 'that') ('is' | 'are') filter:apv_filter [priority=-0.1] => checkAndAddSlot(table, filter);
    table:base_slot_bag ('which' | 'that') ('is' | 'are') filter:npv_filter => checkAndAddSlot(table, filter);
}

one_clean_info_phrase : SlotBag = {
    filter:apv_filter table:base_slot_bag => checkAndAddSlot(table, filter);
    table:base_slot_bag filter:pvp_filter => checkAndAddSlot(table, filter);
    table:base_slot_bag filter:preposition_filter => checkAndAddSlot(table, filter);
}

two_with_info_phrase : SlotBag = {
    table:one_with_info_phrase 'and' filter:npp_filter => checkAndAddSlot(table, filter);
    table:one_which_info_phrase ('and having' | 'and with' | ', with') filter:npp_filter => checkAndAddSlot(table, filter);
    table:one_clean_info_phrase ('with' | 'having') filter:npp_filter => checkAndAddSlot(table, filter);

    filter:apv_filter table:one_with_info_phrase => checkAndAddSlot(table, filter);
}

two_which_info_phrase : SlotBag = {
    table:one_with_info_phrase ('which' | 'that') ('is' | 'are') filter:npi_filter => checkAndAddSlot(table, filter);
    table:one_with_info_phrase ('which' | 'that') filter:avp_filter => checkAndAddSlot(table, filter);
    table:one_with_info_phrase ('which' | 'that') ('is' | 'are') filter:apv_filter [priority=-0.1] => checkAndAddSlot(table, filter);
    table:one_with_info_phrase ('which' | 'that') ('is' | 'are') filter:npv_filter => checkAndAddSlot(table, filter);

    table:one_which_info_phrase 'and' ('is' | 'are') filter:npi_filter => checkAndAddSlot(table, filter);
    table:one_which_info_phrase 'and' filter:avp_filter => checkAndAddSlot(table, filter);
    table:one_which_info_phrase 'and' ('is' | 'are') filter:apv_filter [priority=-0.1] => checkAndAddSlot(table, filter);
    table:one_which_info_phrase 'and' ('is' | 'are') filter:npv_filter => checkAndAddSlot(table, filter);

    table:one_clean_info_phrase ('which' | 'that') ('is' | 'are') filter:npi_filter => checkAndAddSlot(table, filter);
    table:one_clean_info_phrase ('which' | 'that') filter:avp_filter => checkAndAddSlot(table, filter);
    table:one_clean_info_phrase ('which' | 'that') ('is' | 'are') filter:apv_filter [priority=-0.1] => checkAndAddSlot(table, filter);
    table:one_clean_info_phrase ('which' | 'that') ('is' | 'are') filter:npv_filter => checkAndAddSlot(table, filter);

    filter:apv_filter table:one_which_info_phrase => checkAndAddSlot(table, filter);
}

two_clean_info_phrase : SlotBag = {
    filter:apv_filter table:one_clean_info_phrase => checkAndAddSlot(table, filter);
    table:one_clean_info_phrase filter:pvp_filter => checkAndAddSlot(table, filter);
    table:one_clean_info_phrase filter:preposition_filter => checkAndAddSlot(table, filter);
}

three_with_info_phrase : SlotBag = {
    table:two_with_info_phrase 'and' filter:npp_filter => checkAndAddSlot(table, filter);
    table:two_which_info_phrase ('and having' | 'and with' | ', with') filter:npp_filter => checkAndAddSlot(table, filter);
    table:two_clean_info_phrase ('with' | 'having') filter:npp_filter => checkAndAddSlot(table, filter);

    filter:apv_filter table:two_with_info_phrase => checkAndAddSlot(table, filter);
}

three_which_info_phrase : SlotBag = {
    table:two_with_info_phrase ('which' | 'that') ('is' | 'are') filter:npi_filter => checkAndAddSlot(table, filter);
    table:two_with_info_phrase ('which' | 'that') filter:avp_filter => checkAndAddSlot(table, filter);
    table:two_with_info_phrase ('which' | 'that') ('is' | 'are') filter:apv_filter => checkAndAddSlot(table, filter);

    table:two_which_info_phrase 'and' ('is' | 'are') filter:npi_filter => checkAndAddSlot(table, filter);
    table:two_which_info_phrase 'and' filter:avp_filter => checkAndAddSlot(table, filter);
    table:two_which_info_phrase 'and' ('is' | 'are') filter:apv_filter => checkAndAddSlot(table, filter);

    table:two_clean_info_phrase ('which' | 'that') ('is' | 'are') filter:npi_filter => checkAndAddSlot(table, filter);
    table:two_clean_info_phrase ('which' | 'that') filter:avp_filter => checkAndAddSlot(table, filter);
    table:two_clean_info_phrase ('which' | 'that') ('is' | 'are') filter:apv_filter => checkAndAddSlot(table, filter);

    filter:apv_filter table:two_which_info_phrase => checkAndAddSlot(table, filter);
}

three_clean_info_phrase : SlotBag = {
    filter:apv_filter table:two_clean_info_phrase => checkAndAddSlot(table, filter);
    table:two_clean_info_phrase filter:pvp_filter => checkAndAddSlot(table, filter);
    table:two_clean_info_phrase filter:preposition_filter => checkAndAddSlot(table, filter);
}
