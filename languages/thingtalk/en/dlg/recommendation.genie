// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

// Recommendation templates: the agent reads out or describe the top result from the search,
// optionally proposing an action to do on it

// A recommendation from the system is followed by:
// - yes (= "positive_recommendation_reply_pair")
// - some form of search refinement (= "negative_recommendation_reply_pair")
// - a question (= "recommendation_search_question_pair")
// - closing the dialogue (= "recommendation_cancel_pair")

import { Ast, } from 'thingtalk';

import * as C from '../../ast_manip';
import * as D from '../../dialogue_acts';
import * as S from '../../state_manip';
import ThingpediaLoader from '../../load-thingpedia';

import { SlotBag } from '../../slot_bag';

question_system_recommendation_short : D.Recommendation = {
    ctx:ctx_with_result_and_action 'how about' proposal:constant_name with { value = ctx.id0 }
        => D.makeRecommendation(ctx, proposal);
}

action_recommendation : D.Recommendation = {
    ctx:ctx_with_result_and_action ('would you like to' | 'would you like me to') action:contextual_action_phrase with { functionName = ctx.nextFunction } [weight=0.1]
        => D.makeActionRecommendation(ctx, action);
}

actionable_system_recommendation_short : D.Recommendation = {
    // for Thingpedia phrases (#_[result]), at inference time we pick the top one and replace it
    // directly using a context phrase
    // at training time we generate all possible phrases and match
    ?inference {
        ctx:ctx_with_result_noquestion proposal:ctx_thingpedia_result [priority=2]
            => D.makeThingpediaRecommendation(ctx, proposal);
        ctx:ctx_with_result_noquestion proposal:ctx_thingpedia_result [priority=2]
            => D.makeThingpediaRecommendation(ctx, proposal);
    }
    !inference {
        ctx:ctx_with_result_noquestion proposal:thingpedia_result with { functionName = ctx.currentFunction } [priority=2]
            => D.makeThingpediaRecommendation(ctx, proposal);
        ctx:ctx_with_result_noquestion proposal:thingpedia_result with { functionName = ctx.currentFunction } [priority=2]
            => D.makeThingpediaRecommendation(ctx, proposal);
    }

    ( ctx:ctx_with_result_and_action 'i' ('recommend' | 'suggest') proposal:constant_name with { value = ctx.id0 }
    | ctx:ctx_with_result_noquestion ('i see' | 'i have' | 'i have found' | 'i have one , it is') proposal:constant_name with { value = ctx.id0 }
    | ctx:ctx_with_result_argminmax 'the answer is' proposal:constant_name with { value = ctx.id0 }
    ) => D.makeRecommendation(ctx, proposal);

    ctx:ctx_with_result_argminmax 'the' base:base_table with { functionName = ctx.currentFunction } 'with the highest' param:out_param_Any with { functionName = ctx.currentFunction } 'is' proposal:constant_name with { value = ctx.id0 } [priority=1]
        => D.makeArgMinMaxRecommendation(ctx, proposal, base, param, 'desc');
    ctx:ctx_with_result_argminmax 'the' base:base_table with { functionName = ctx.currentFunction } 'with the lowest' param:out_param_Any 'is' proposal:constant_name with { value = ctx.id0 } [priority=1]
        => D.makeArgMinMaxRecommendation(ctx, proposal, base, param, 'asc');

    ctx:ctx_with_result_argminmax 'the' argminmax:apv_argminmax with { functionName = ctx.currentFunction } base:base_table with { functionName = ctx.currentFunction } 'is' proposal:constant_name with { value = ctx.id0 } [priority=2]
        => D.makeArgMinMaxRecommendation(ctx, proposal, base, argminmax[0], argminmax[1]);
}

recommendation_info_action_pair : [D.ResultPhrase, Ast.Invocation|null] = {
    'is a' res:result_info_phrase '.' action:action_coref_recommendation [weight=0.8] => {
        const resultType = res.info.schema!.getArgType('id');

        if (!resultType || !C.hasArgumentOfType(action, resultType))
            return null;
        return [res, action];
    };

    'is a' res:result_info_phrase '.' learn_more_offer [weight=0.2] => {
        return [res, null];
    };
}

user_question_answer_begin : D.Recommendation = {
    ctx:ctx_with_result_question proposal:constant_name with { value = ctx.id0 }
        => D.makeRecommendation(ctx, proposal);

    // to support Xkcd (which uses a numeric "ID" property), we allow any type of constant
    ?inference ctx:ctx_with_result_question proposal:constant_Any
        => D.makeRecommendation(ctx, proposal);
}

// note: most of the following combine non-terminals that are already depending
// on the context, so we don't need an additional constraint here

direct_user_question_answer : D.Recommendation = {
    res:direct_result_info_phrase
        => D.makeThingpediaRecommendation(res.ctx, res.info);
}

proposal_info_action_pair : [D.ResultPhrase, Ast.Invocation|null] = {
    'is a' res:result_info_phrase '.' action:action_coref_recommendation [weight=0.8] => {
        const resultType = res.info.schema!.getArgType('id');

        if (!resultType || !C.hasArgumentOfType(action, resultType))
            return null;
        return [res, action];
    };

    !inference {
        'is a' res:result_info_phrase '.' learn_more_offer [weight=0.2] => {
            return [res, null];
        };
    }
}

actionable_system_display_result_short : D.Recommendation = {
    // for Thingpedia phrases (#_[result]), at inference time we pick the top one and replace it
    // directly using a context phrase
    // at training time we generate all possible phrases and match
    ?inference
        ctx:ctx_with_result info:ctx_thingpedia_result '.' [priority=5]
            => D.makeDisplayResult(ctx, info);
    !inference
        ctx:ctx_with_result info:thingpedia_result with { functionName = ctx.currentFunction } '.' [priority=5]
            => D.makeDisplayResult(ctx, info);
}

// a non-list result
system_nonlist_result : D.Recommendation = {
    actionable_system_display_result_short;

    ctx:ctx_with_result_noquestion res:direct_result_info_phrase
        => D.makeDisplayResult(ctx, res.info);
    ctx:ctx_with_result_question res:direct_result_info_phrase [priority=10]
        => D.makeDisplayResult(ctx, res.info);
    phrase:actionable_system_display_result_short extra:direct_result_info_phrase
        => D.combineDisplayResult(phrase, extra.info);

    // TODO: offer an action on the result (needs non-ID parameter passing to be useful)
    //proposal:actionable_system_display_result_short action:action_coref_recommendation
    //    => D.checkActionForDisplayResult(proposal, action);

    ?anything_else proposal:actionable_system_display_result_short anything_else_phrase => {
        const clone : any = {};
        Object.assign(clone, proposal);
        clone.hasAnythingElse = true;
        return clone;
    };
}

// a recommendation consists of the first result of the current query,
// and action to do with it
// the action can come from the context (if the user expressed it earlier), or it can
// be offered immediately
system_recommendation : D.Recommendation = {
    ( ctx_with_action proposal:question_system_recommendation_short '.'
    | ctx_with_action proposal:actionable_system_recommendation_short '.'
    ) => proposal;

    ctx_with_action proposal:actionable_system_recommendation_short '.' learn_more_offer
        => D.recommendationSetLearnMore(proposal);

    ctx_without_projection proposal:action_recommendation => proposal;
    ctx_without_projection proposal:actionable_system_recommendation_short action:action_coref_recommendation
        => D.checkActionForRecommendation(proposal, action);

    // recommendations after a search
    // with additional info
    ( proposal:question_system_recommendation_short '?' 'it is a' res:result_info_phrase '.'
    | proposal:action_recommendation '?' 'it is a' res:result_info_phrase '.'
    | proposal:actionable_system_recommendation_short '.' 'it is a' res:result_info_phrase '.'
    | proposal:question_system_recommendation_short ', which is a' res:result_info_phrase '?'
    | proposal:action_recommendation ', which is a' res:result_info_phrase '?'
    | proposal:actionable_system_recommendation_short ', which is a' res:result_info_phrase '.'
    ) => D.checkRecommendation(proposal, res.info);

    // recommendations after a search
    // no additional info
    ( proposal:question_system_recommendation_short '?'
    | proposal:action_recommendation '?'
    | proposal:actionable_system_recommendation_short '.'
    ) => proposal;

    // long-form answers to a single question
    proposal:user_question_answer_begin 'is a' res:result_info_phrase '.'
        => D.checkRecommendation(proposal, res.info);

    // short answers to a single question
    ( proposal:user_question_answer_begin filter:avp_filter with { functionName = proposal.functionName } '.'
    | proposal:user_question_answer_begin 'is' filter:pvp_filter with { functionName = proposal.functionName } '.'
    | proposal:user_question_answer_begin 'is' filter:apv_filter with { functionName = proposal.functionName } '.'
    | proposal:user_question_answer_begin 'has' filter:npp_filter with { functionName = proposal.functionName } '.'
    ) => D.makeAnswerStyleRecommendation(proposal, filter);

    // even shorter answers to single questions
    direct_user_question_answer;

    // recommendations after a search, followed by an offer to make an action
    ( proposal:actionable_system_recommendation_short '. it' pair:proposal_info_action_pair [weight=2]
    | proposal:user_question_answer_begin pair:proposal_info_action_pair [weight=2]
    ) => {
        const [res, action] = pair;
        const maybeProposal = D.checkRecommendation(proposal, res.info);
        if (maybeProposal === null)
            return null;
        if (action === null)
            return D.recommendationSetLearnMore(maybeProposal);
        return D.checkActionForRecommendation(maybeProposal, action);
    };
}

recommendation_accept_phrase_with_action : Ast.Invocation = {
    accept_phrase generic_preamble_for_action action:coref_action_command => action;
}

recommendation_accept_phrase_by_name : [Ast.EntityValue|Ast.NumberValue, Ast.Invocation|null] = {
    name:generic_list_proposal_accept_phrase => [name, null];
    name:list_proposal_accept_phrase_must_have_action => [name, null];
    accept:list_proposal_accept_phrase_with_action => [accept[0], accept[1]];
}
