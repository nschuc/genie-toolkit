// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

// Templates that describe results from a query

import { Ast, } from 'thingtalk';

import * as C from '../../ast_manip';
import * as D from '../../dialogue_acts';
import * as S from '../../state_manip';

count_aggregation_reply_suffix : S.ContextInfo = {
    ctx:ctx_with_aggregation_result base:base_table ('like that' | 'with those characteristics')
        => D.makeCountAggregationReplySuffix(ctx, base, false);

    ctx:ctx_with_aggregation_result table:one_with_filter_table [priority=10]
        => D.makeCountAggregationReplySuffix(ctx, table, true);
    ctx:ctx_with_aggregation_result table:two_with_filter_table [priority=10]
        => D.makeCountAggregationReplySuffix(ctx, table, true);
}

count_aggregation_reply : S.AgentReplyRecord = {
    ('there are' | 'i see' | 'i have') num:constant_Number ctx:count_aggregation_reply_suffix
        => D.makeCountAggregationReply(ctx, num);
}

agg_operator_for_reply : 'min'|'max'|'avg'|'sum' = {
    'minimum' => 'min';
    'smallest' => 'min';
    'maximum' => 'max';
    'largest' => 'max';
    'average' => 'avg';
    'total' => 'sum';
}

other_aggregation_reply : S.AgentReplyRecord = {
    ctx:ctx_with_aggregation_result 'the' op:agg_operator_for_reply p:out_param_Any 'is' c:constant_Any
        => D.makeOtherAggregationReply(ctx, op, p, c);
}       
