// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

// Coref actions: actions that operate on the current result, referred by coreference ("it", "that", "the restaurant")

import { Ast, Type } from 'thingtalk';

import * as C from '../../ast_manip';
import * as D from '../../dialogue_acts';
import * as S from '../../state_manip';

// import thingpedia info
import _tpLoader from '../../load-thingpedia';

coref_action_phrase : Ast.Invocation = {}
contextual_action_phrase : Ast.Invocation = {}
list_coref_action_phrase : Ast.Invocation = {}

for (let [pslot, typestr] of _tpLoader.params.in.values()) {
    // coref to one object (for recommendation)
    coref_action_phrase : Ast.Invocation = {
        ( action:thingpedia_action 'it'
        | action:thingpedia_action 'this'
        | action:thingpedia_action 'that'
        ) [-> (pslot.name)] => {
            if (!(action instanceof Ast.InvocationExpression))
                return null;
            const type = action.schema!.getArgType(pslot.name);
            if (!type || !(type instanceof Type.Entity))
                return null;
            const replaced = C.replacePlaceholderWithUndefined(action, pslot, typestr);
            if (replaced === null)
                return null;
            return replaced.invocation;
        };

        ( action:thingpedia_get_command 'it'
        | action:thingpedia_get_command 'this'
        | action:thingpedia_get_command 'that'
        ) [-> (pslot.name)] => {
            if (!(action instanceof Ast.InvocationExpression))
                return null;
            const type = action.schema!.getArgType(pslot.name);
            if (!type || !(type instanceof Type.Entity))
                return null;
            const replaced = C.replacePlaceholderWithUndefined(action, pslot, typestr);
            if (replaced === null)
                return null;
            return replaced.invocation;
        };

        action:thingpedia_action noun:the_base_noun_phrase [-> (pslot.name)] => {
            if (!(action instanceof Ast.InvocationExpression))
                return null;
            const type = action.schema!.getArgType(pslot.name);
            if (!type || !(type instanceof Type.Entity) || !C.isEntityOfFunction(type, noun))
                return null;
            const replaced = C.replacePlaceholderWithUndefined(action, pslot, typestr);
            if (replaced === null)
                return null;
            return replaced.invocation;
        };

        action:thingpedia_get_command noun:the_base_noun_phrase [-> (pslot.name)] => {
            if (!(action instanceof Ast.InvocationExpression))
                return null;
            const type = action.schema!.getArgType(pslot.name);
            if (!type || !(type instanceof Type.Entity) || !C.isEntityOfFunction(type, noun))
                return null;
            const replaced = C.replacePlaceholderWithUndefined(action, pslot, typestr);
            if (replaced === null)
                return null;
            return replaced.invocation;
        };
    }

    // coref to a list (for list proposal)
    list_coref_action_phrase = {
        ( action:thingpedia_action 'either one'
        | action:thingpedia_action 'either of them'
        | action:thingpedia_action 'any of them'
        | action:thingpedia_action 'any one of them'
        ) [-> (pslot.name)] => {
            if (!(action instanceof Ast.InvocationExpression))
                return null;
            const type = action.schema!.getArgType(pslot.name);
            if (!type || !(type instanceof Type.Entity))
                return null;
            const replaced = C.replacePlaceholderWithUndefined(action, pslot, typestr);
            if (replaced === null)
                return null;
            return replaced.invocation;
        };

        ( action:thingpedia_get_command 'either one'
        | action:thingpedia_get_command 'either of them'
        | action:thingpedia_get_command 'any of them'
        | action:thingpedia_get_command 'any one of them'
        ) [-> (pslot.name)] => {
            if (!(action instanceof Ast.InvocationExpression))
                return null;
            const type = action.schema!.getArgType(pslot.name);
            if (!type || !(type instanceof Type.Entity))
                return null;
            const replaced = C.replacePlaceholderWithUndefined(action, pslot, typestr);
            if (replaced === null)
                return null;
            return replaced.invocation;
        };
    }

    // operate on an object by name - this rule is only available after the first turn
    contextual_action_phrase = {
        action:thingpedia_action name:constant_name [-> (pslot.name) { isConstant: true }] => {
            if (!(action instanceof Ast.InvocationExpression))
                return null;
            const newAction = C.replacePlaceholderWithConstant(action, pslot, name);
            if (newAction === null)
                return null;
            return newAction.invocation;
        };

        action:thingpedia_get_command name:constant_name [-> (pslot.name) { isConstant: true }] => {
            if (!(action instanceof Ast.InvocationExpression))
                return null;
            const newAction = C.replacePlaceholderWithConstant(action, pslot, name);
            if (newAction === null)
                return null;
            return newAction.invocation;
        };
    }

    // add the rules for constant parameters too
    coref_action_phrase = {
        a:coref_action_phrase v:$('constant_' + typestr) [-> (pslot.name) { isConstant: true }] => C.replacePlaceholderWithConstant(a, pslot, v);
    }
    contextual_action_phrase = {
        a:contextual_action_phrase v:$('constant_' + typestr) [-> (pslot.name) { isConstant: true }] => C.replacePlaceholderWithConstant(a, pslot, v);
    }
    list_coref_action_phrase = {
        a:list_coref_action_phrase v:$('constant_' + typestr) [-> (pslot.name) { isConstant: true }] => C.replacePlaceholderWithConstant(a, pslot, v);
    }
}

// proposals/recommendations from the agent

action_coref_recommendation : Ast.Invocation = {
    ( 'would you like to' action:coref_action_phrase '?' [priority=1]
    | 'would you like me to' action:coref_action_phrase ' for you ?' [priority=1]
    ) if complete => {
        if (action.in_params.some((ip) => !ip.value.isUndefined))
            return null;
        return action;
    };
}

action_coref_list_proposal : Ast.Invocation = {
    'would you like to' action:list_coref_action_phrase '?' if complete [priority=1] => {
        if (action.in_params.some((ip) => !ip.value.isUndefined))
            return null;
        return action;
    };
}

// sentences from the user

coref_action_command : Ast.Invocation = {
    ctx:ctx_with_action base:coref_action_phrase with { functionName = ctx.nextFunction } if complete
        => D.contextualAction(ctx, base);
    ctx:ctx_without_action base:coref_action_phrase => base;

    ( action:coref_action_command param:preposition_input_param with { functionName = action.functionName }
    | action:coref_action_command ('with' | 'having') param:npp_input_param with { functionName = action.functionName }
    ) => C.addInvocationInputParam(action, param);
}

action_by_name_command : Ast.Invocation = {
    ctx:ctx_incomplete_action base:contextual_action_phrase with { functionName = ctx.nextFunction } if complete
        => D.contextualAction(ctx, base);
    ctx:ctx_without_action base:contextual_action_phrase => base;

    ( action:action_by_name_command param:preposition_input_param with { functionName = action.functionName }
    | action:action_by_name_command ('with' | 'having') param:npp_input_param with { functionName = action.functionName }
    ) => C.addInvocationInputParam(action, param);
}

// an action command that continues an existing action command (used for slot-filling)
action_continuation_command : Ast.Invocation = {
    ( ctx:ctx_incomplete_action base:coref_action_phrase with { functionName = ctx.nextFunction }
    | ctx:ctx_incomplete_action base:contextual_action_phrase with { functionName = ctx.nextFunction }
    ) if complete => D.contextualAction(ctx, base);
    ( ctx:ctx_incomplete_action base:thingpedia_action with { functionName = ctx.nextFunction }
    | ctx:ctx_incomplete_action base:thingpedia_get_command with { functionName = ctx.nextFunction }
    ) if complete => {
        if (!(base instanceof Ast.InvocationExpression))
            return null;
        return D.contextualAction(ctx, base.invocation);
    };

    ( action:action_continuation_command param:preposition_input_param with { functionName = action.functionName }
    | action:action_continuation_command ('with' | 'having') param:npp_input_param with { functionName = action.functionName }
    ) => C.addInvocationInputParam(action, param);
}

continuation_query : Ast.Invocation = {
    ctx:ctx_incomplete_action base:complete_table with { functionName = ctx.nextFunction } => {
        if (!(base instanceof Ast.InvocationExpression))
            return null;
        return D.contextualAction(ctx, base.invocation);
    };
}

// sentences from the agent
action_description_phrase : Ast.Invocation = {
    coref_action_phrase;
    action:thingpedia_action if complete => {
        if (!(action instanceof Ast.InvocationExpression))
            return null;
        return action.invocation;
    };

    ( action:action_description_phrase param:preposition_input_param with { functionName = action.functionName }
    | action:action_description_phrase ('with' | 'having') param:npp_input_param with { functionName = action.functionName }
    ) => C.addInvocationInputParam(action, param);
}
